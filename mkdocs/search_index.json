{
    "docs": [
        {
            "location": "/", 
            "text": "Philisp SDK API Definitions\n\n\nSDKConfiguration\n\n\n\n\n\n\n-(id)init;\n - Initializer for SDK object.\n\n\n Properties with setter and getter \n\n\nPhilipsSupportedDevices (NSArray) \n\n\nEncryptionKey (NSString) \n\n\nBackgroundSynch (Bool) \n\n\nDataDurationToStore (Integer) \n\n\nConnectionTimeOut (Interval)\n\n\n\n\n\n\nMoonSDK\n\n\n\n\n\n\n-(void)initSDKWithConfiguration:(SDKConfiguration*)configObject withSuccess:(void(^))success failure:(void(^)(NSError *error))failure;\n\n\nSDKConfiguration  # The SDKConfiguration object.\nsuccess           # Sucess block.\nfailure           # Failure block returns if any error.\n\n\n\n\n\n\n\n-(float)getSDKVersion;\n - Returns the version of SDK\n\n\n\n\n\n\nMoonSDK_API\n\n\nPairing Public\n\n\n\n\n\n\n-(void)startPairingWithDeviceType(PhilipsDeviceType)type withUserManagerDetails(UserConfiguration )userInfoObject withSucess:(void (^)(NSDictionary *pairedDeviceInfo))sucess withfailure:(void(^)(NSError *error))failure;\n\n\nParameters\ntype            # Type of Device to pair Philips device(Watch/Band). \nuserInfoObject  # UserConfiguration object which have user details.\nsuccess         # Sucess block returns the details of pired device.\nfailure         # Failure block returns if any error.\n\n\n\n\n\n\n\n-(void)startPairingWithDeviceType(PhilipsDeviceType)type withSucess:(void (^))sucess withfailure:(void(^)(NSError *error))failure;\n\n\nParameters\ntype            # Type of Device to pair Philips device(Watch/Band). \nsuccess         # Sucess block get calls after paired.\nfailure         # Failure block returns if any error.\n\n\n\n\n\n\n\n-(NSArray*)getAllPairedDevices;\n\n\nReturns\npairedList #returns the list of paired devices.\n\n\n\n\n\n\n\n-(NSArray*)getListOfBondedDevicesForType:(PhilipsDeviceType)type;\n\n\nParameters\ntype      # Type of Philips device(Watch/Band).\n\nReturns\npairedList #returns the list of paired devices.\n\n\n\n\n\n\n\n-(PhilipsDevice*)getDeviceForType:(PhilipsDeviceType)type;\n\n\nParameters\ntype      # Type of Philips device(Watch/Band).\n\nReturns\npairedList #returns the details of  device object(PhilipsDeviceConfiguration).\n\n\n\n\n\n\n\n-(void)removePairingOfDevice(PhilipsDevice *)device cleanLocalData:(Bool)clean withSucess: (void (^)())success withfailure:(void(^)(NSError*error))failure;\n\n\nParameters\ndevice      # Philips device(Watch/Band) need to be removed.\nclean       # Bool value which decide to clear the DB.\nsuccess     # Sucess block invokes after unpairing the device.\nfailure     # Failure block returns if any error.\n\n\n\n\n\n\n\nPairing Private\n\n\n\n\n\n\n-(void)startScanForPairedDeviceType(PhilipsDeviceType)type withScanTimeOut(NSInteger)seconds forPairedList:(void(^)(NSArray *list))pairedList;\n\n\nParameters\ntype            # Type of Device to be scan Philips device(Watch/Band). \nseconds         # Scanning time out\npairedList      # Returns the Array of paired devices.\n\n\n\n\n\n\n\n-(void)startScanForPairedDeviceType(PhilipsDeviceType)type withPairedList:(void(^)(NSArray *list))pairedList;\n\n\nParameters\ntype            # Type of Device to be scan Philips device(Watch/Band). \npairedList      # Returns the Array of paired devices.\n\n\n\n\n\n\n\n-(void)injectAssociationDeviceID(NSSting *)deviceMACaddress withfailureError:(void(^)(NSError *error))error;\n\n\nParameters\ndeviceMACaddress # Address of device need to be injected.\nfailure          # Failure block returns if any error.\n\n\n\n\n\n\n\n-(void)connectDevice(PhilipsDevice *)device withSucess:(void (^)())sucess withfailure:(void(^) (NSError *error))failure;\n\n\nParameters\ndevice      # Type of Philips device(Watch/Band) need to connect.\nsuccess     # Sucess block invokes once device get connected.\nfailure     # Failure block returns if any error.\n\n\n\n\n\n\n\n-(void)connectDevice(PhilipsDevice *)device withConnectTimeOut(NSInteger)seconds withSucess:(void (^)())sucess withfailure:(void(^)(NSError *error))failure;\n\n\nParameters\ndevice      # Type of Philips device(Watch/Band) need to connect.\nseconds     # connection time out interval\nsuccess     # Sucess block invokes once device get connected .\nfailure     # Failure block returns if any error.\n\n\n\n\n\n\n\n-(void)disconnectDevice(PhilipsDevice *)device withSucess:(void (^)())sucess withfailure: (void(^)(NSError *error))failure;\n\n\nParameters\ndevice      # Type of Philips device(Watch/Band) to disconnect.\nsuccess     # Sucess block invokes once disconnect the device.\nfailure     # Failure block returns if any error.\n\n\n\n\n\n\n\nSynching Public\n\n\n\n\n\n\n-(void)startSynchForDevice(PhilipsDevice *)device with delegate:(Id)delegate;\n\n\nParameters\ndevice      # Type of Philips device(Watch/Band) need to synch.\ndelegate    # protocol to get updates on synching process.\n\n\n\n\n\n\n\n-(void)setSynchTimeout(NSTimeInterval)timeout;\n\n\nParameters\ntimeout     # Synching connection time out.\n\n\n\n\n\n\n\n-(void)stopSynch;\n - To stop synching.\n\n\n\n\n\n\nSynching Delegate\n\n\n\n\n\n\n-(void)didUpdateProgress:(Float)progress;\n\n\nParameters\nprogress    # Provies the progress percentage of synching.\n\n\n\n\n\n\n\n-(void)didFailSynchWithError(NSError *)error;\n\n\nParameters\nerror     # Invokes while failur in synching along with error.\n\n\n\n\n\n\n\n-(void)didFinishSynching;\n - Invoked when synching completed\n\n\n\n\n\n\nSynching Private\n\n\n\n\n-(id)initSynchManagerWithTimeout(NSTimeInterval)timeout isBeaconEnabled(Bool)isEnabled\nwithSucess:(void (^)())sucess withfailure:(void(^)(NSError *error))failure;\nParameters\ntimeout     # Synching connection time out.\nisEnabled   # To enable/disbale the beacon\nsuccess     # Sucess block invokes once creation of synch manager instance.\nfailure     # Failure block returns if any error.\n\n\n\n\n\n\n\nObservations Public\n\n\n\n\n\n\n-(NSArray*)getDataFromLocalDBForObservationType:(ObservationType)type fromDate:(NSDate*)startDate toDate:(NSDate*)endDate;\n\n\nParameters\ntype        # Type of observation.\nstartDate   # From the date,the observations to be fetched.\nendDate     # Till the date,the observations to be fetched.\n\nReturns     # List of observations between Start and End dates\n\n\n\n\n\n\n\n-(Float*)getMinForObservationType:(ObservationType)type forDevice:(PhilipsDevice*)device;\n\n\nParameters\ntype        # Type of observation.\ndevice      # Philips device details.\n\nReturns     # Minimum value of ObservationType.\n\n\n\n\n\n\n\n-(Float*)getMaxForObservationType:(ObservationType)type forDeviceType: (PhilipsDevice*)device;\n\n\nParameters\ntype        # Type of observation.\ndevice      # Philips device details.\n\nReturns     # Maximum value of ObservationType.\n\n\n\n\n\n\n\n-(NSArray*)getDayTotalForObservationType:(ObservationType)type day(NSDate*)date forDeviceType:(PhilipsDevice*)device;\n\n\nParameters\ntype        # Type of observation.\nday         # Date of observation.\ndevice      # Philips device details.\n\nReturns     # List of Observations of the give date.\n\n\n\n\n\n\n\n-(NSArray*)getAllObservationforDeviceType(PhilipsDevice*)device start(NSDate*)date end(NSDate*)date;\n\n\nParameters\ndevice      # Philips device details.\nstartDate   # From the date, the observations to be fetched.\nendDate     # Till the date, the observations to be fetched.\n\nReturns     # List of Observations between the given dates.\n\n\n\n\n\n\n\n-(NSArray*)getLatestObservationForObservationType:(ObservationType)type forDeviceType: (PhilipsDevice*)device;\n\n\nParameters\ntype        # Type of observation.\ndevice      # Philips device details.\n\nReturns     # List of Observations of current day.\n\n\n\n\n\n\n\n-(NSArray*)getSupportedObservationTypesForDeviceTypes:(PhilipsDevice*)device;\n\n\nParameters\ndevice      # Philips device details.\n\nReturns     # List of supported Observations of the philips device.\n\n\n\n\n\n\n\n-(NSArray*)getAllObservationsDeviceType:(PhilipsDevice*)device start(NSDate*)startDate end(NSDate*)endDate;\n\n\nParameters\ndevice      # Philips device details.\nstartDate   # From the date, the observations to be fetched.\nendDate     # Till the date, the observations to be fetched.\n\nReturns     # List of Observations between start and end dates.\n\n\n\n\n\n\n\n-(NSArray*)getLatestObservationTypesForDevice:(PhilipsDevice*)device;\n\n\nParameters\ndevice      # Philips device details.\n\nReturns     # List of Observation types of current day.\n\n\n\n\n\n\n\n-(NSArray*)getObservationForObservationType:(ObservationType)type forDeviceType:(PhilipsDevice*)device from(NSDate*)startDate to(NSDate*)endDate;\n\n\nParameters\ntype        # Type of observation.\ndevice      # Philips device details.\nstartDate   # From the date, the observations to be fetched.\nendDate     # Till the date, the observations to be fetched.\n\nReturns     # List of Observations between start and end dates.\n\n\n\n\n\n\n\n-(void)clearAllObservations;\n - Delete all the observations from local DB.\n\n\n\n\n\n\n-(void)clearAllObservationsForDeviceType:(PhilipsDevice*)device;\n - Delete all the observations from local DB for give philips device.\n\n\n\n\n\n\nObservations Private\n\n\n\n\n\n\n-(id)initCoreDataManagerWithDataDuration:(Integer)daysToStore withModelName:(NSString*)name\nstorFolder:(NSString*)storeFolder withPassPhrase :(NSString*)key;\n\n\nParameters\ndaysToStore # Number of days Local storage need to be maintained.\nname        # Name of the local DB.\nstoreFolder # Path of the local storage.\nkey         # Key used for encryption/decryption.\n\nReturns     # instance of core data manager.\n\n\n\n\n\n\n\n\u2013(void)setup;\n - Core data releated setup.\n\n\n\n\n\n\n-(void)createObservations:(NSArray*)observations withDeviceType:(PhilipsDevice*)device;\n\n\nParameters\nobservations    # List of observations to be stored.\ndevice          # Philips device details.\n\n\n\n\n\n\n\nTargetSetting\n\n\n\n\n\n\n-(void)setActiveMinutes:(Integer)value forDevice(PhilipsDevice*)device;\n\n\nParameters\nvalue       # Active in minutes. \ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).\n\n\n\n\n\n\n\n-(void)setActiveCalories:(Integer)value forDevice(PhilipsDevice*)device;\n\n\nParameters\nvalue       # Count of active calories.\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).\n\n\n\n\n\n\n\n-(void)setSteps:(Integer)value forDevice(PhilipsDevice*)device;\n\n\nParameters\nvalue       # Count of active calories.\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).\n\n\n\n\n\n\n\n-(Integer)getActiveMinutesforDevice(PhilipsDevice*)device;\n\n\nReturns\nInteger     # Active minutes.\n\nParameter\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).\n\n\n\n\n\n\n\n-(Integer)getActiveCaloriesforDevice(PhilipsDevice*)device;\n\n\nReturn\nInteger     # Active calories.\n\nParameter\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).\n\n\n\n\n\n\n\n-(Integer)getStepsforDevice(PhilipsDevice*)device;\n\n\nReturn\nInteger     # Active steps.\n\nParameter\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).\n\n\n\n\n\n\n\nUserConfiguration\n\n\n\n\n\n\n-(id)init;\n -Initializer for User Configuration object\n\n\n Properties with setter and getter \n\n\nPhilipsSupportedDevices (NSArray) \n\n\nHeight (Integer)\n\n\nWeight (Integer)\n\n\nGender (Integer)\n\n\nDOB (NSDate) \n\n\nDeviceWearingPosition (Integer) \n\n\nUserDominantHand (Integer)\n\n\nActiveMinutes (Integer) \n\n\nActiveCalories (Integer) \n\n\nSteps (Integer)\n\n\n\n\n\n\nPhilipsDeviceConfiguration\n\n\n(Wrapper of BLE device)\n\n\n\n\n\n\n-(id)init;\n -Initializer for PhilipsDeviceConfiguration object\n\n\n Properties with setter and getter \n\n\nBatteryLevel (NSString)\n\n\nComponentCTN (NSString)\n\n\nComponentVersion (Integer)\n\n\nDatePaired (NSDate) \n\n\nDeviceID (NSString) \n\n\nFirmwareVersion (NSString)\n\n\nLastSynchDate (NSDate) \n\n\nMajorNumber (Integer) \n\n\nManufacturName (NSString) \n\n\nMinorNumber (Integer) \n\n\nModelName (NSString) \n\n\nProximityUUID (NSString) \n\n\nSerialNumber (NSString)\n\n\n\n\n\n\nPhilipsDevice\n\n\n\n\n\n\n-(id)init;\n  Initializer for PhilipsDevice object.\n\n\n\n\n\n\n-(void)enableBeacon(Bool)isEnable;\n\n\nParameters\nisEnable    # To Enable/Disable iBeacon.\n\n\n\n\n\n\n\n-(void)setBeaconFrequence:(Integert)value forDevice:(PhilipsDevice*)device;\n\n\nParameters\nvalue   # To set beacon frequence.\ndevice  # Contains infomation about Philips device (PhilipsDeviceConfiguration).\n\n\n\n\n\n\n\n-(void)resetBeaconFrequenceforDevice:(PhilipsDevice*)device;\n\n\nParameters\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).\n\n\n\n\n\n\n\n-(void)setUnitsType:(Integer)unitsType;\n\n\nParameters\nunitsType   # To set units type.\n\n\n\n\n\n\n\n\u2013(void)stopFirmwareUploadToDevice:(PhilipsDevice*)device;\n\n\nParameters\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).\n\n\n\n\n\n\n\n\u2013(void)diployFirmwareToDevice:(PhilipsDevice*)device;\n\n\nParameters\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).\n\n\n\n\n\n\n\n\u2013(void)uploadFirmware:(NSData)firmware forDevice:(PhilipsDevice*)device;\n\n\nParameters\nfirmware    # Firmware data to be diployed to Philips device.\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).\n\n\n\n\n\n\n\nPhilipsDevice Delegate\n\n\n\n\n\n\n-(void)didUpdateProgressofUpload:(Float)progress;\n \n\n\nParameters\nprogress    # Firmware delegate method invoked to update the progress.\n\n\n\n\n\n\n\n-(void)didFinishUpload;\n -Invoked once finished completed.\n\n\n\n\n\n\n-(void)didFailUploadWithError(NSError *)error;\n\n\nParameters\nerror    # Invoked if any error occurred while uploding.", 
            "title": "Home"
        }, 
        {
            "location": "/#philisp-sdk-api-definitions", 
            "text": "", 
            "title": "Philisp SDK API Definitions"
        }, 
        {
            "location": "/#sdkconfiguration", 
            "text": "-(id)init;  - Initializer for SDK object.   Properties with setter and getter   PhilipsSupportedDevices (NSArray)   EncryptionKey (NSString)   BackgroundSynch (Bool)   DataDurationToStore (Integer)   ConnectionTimeOut (Interval)", 
            "title": "SDKConfiguration"
        }, 
        {
            "location": "/#moonsdk", 
            "text": "-(void)initSDKWithConfiguration:(SDKConfiguration*)configObject withSuccess:(void(^))success failure:(void(^)(NSError *error))failure;  SDKConfiguration  # The SDKConfiguration object.\nsuccess           # Sucess block.\nfailure           # Failure block returns if any error.    -(float)getSDKVersion;  - Returns the version of SDK", 
            "title": "MoonSDK"
        }, 
        {
            "location": "/#moonsdk_api", 
            "text": "Pairing Public    -(void)startPairingWithDeviceType(PhilipsDeviceType)type withUserManagerDetails(UserConfiguration )userInfoObject withSucess:(void (^)(NSDictionary *pairedDeviceInfo))sucess withfailure:(void(^)(NSError *error))failure;  Parameters\ntype            # Type of Device to pair Philips device(Watch/Band). \nuserInfoObject  # UserConfiguration object which have user details.\nsuccess         # Sucess block returns the details of pired device.\nfailure         # Failure block returns if any error.    -(void)startPairingWithDeviceType(PhilipsDeviceType)type withSucess:(void (^))sucess withfailure:(void(^)(NSError *error))failure;  Parameters\ntype            # Type of Device to pair Philips device(Watch/Band). \nsuccess         # Sucess block get calls after paired.\nfailure         # Failure block returns if any error.    -(NSArray*)getAllPairedDevices;  Returns\npairedList #returns the list of paired devices.    -(NSArray*)getListOfBondedDevicesForType:(PhilipsDeviceType)type;  Parameters\ntype      # Type of Philips device(Watch/Band).\n\nReturns\npairedList #returns the list of paired devices.    -(PhilipsDevice*)getDeviceForType:(PhilipsDeviceType)type;  Parameters\ntype      # Type of Philips device(Watch/Band).\n\nReturns\npairedList #returns the details of  device object(PhilipsDeviceConfiguration).    -(void)removePairingOfDevice(PhilipsDevice *)device cleanLocalData:(Bool)clean withSucess: (void (^)())success withfailure:(void(^)(NSError*error))failure;  Parameters\ndevice      # Philips device(Watch/Band) need to be removed.\nclean       # Bool value which decide to clear the DB.\nsuccess     # Sucess block invokes after unpairing the device.\nfailure     # Failure block returns if any error.    Pairing Private    -(void)startScanForPairedDeviceType(PhilipsDeviceType)type withScanTimeOut(NSInteger)seconds forPairedList:(void(^)(NSArray *list))pairedList;  Parameters\ntype            # Type of Device to be scan Philips device(Watch/Band). \nseconds         # Scanning time out\npairedList      # Returns the Array of paired devices.    -(void)startScanForPairedDeviceType(PhilipsDeviceType)type withPairedList:(void(^)(NSArray *list))pairedList;  Parameters\ntype            # Type of Device to be scan Philips device(Watch/Band). \npairedList      # Returns the Array of paired devices.    -(void)injectAssociationDeviceID(NSSting *)deviceMACaddress withfailureError:(void(^)(NSError *error))error;  Parameters\ndeviceMACaddress # Address of device need to be injected.\nfailure          # Failure block returns if any error.    -(void)connectDevice(PhilipsDevice *)device withSucess:(void (^)())sucess withfailure:(void(^) (NSError *error))failure;  Parameters\ndevice      # Type of Philips device(Watch/Band) need to connect.\nsuccess     # Sucess block invokes once device get connected.\nfailure     # Failure block returns if any error.    -(void)connectDevice(PhilipsDevice *)device withConnectTimeOut(NSInteger)seconds withSucess:(void (^)())sucess withfailure:(void(^)(NSError *error))failure;  Parameters\ndevice      # Type of Philips device(Watch/Band) need to connect.\nseconds     # connection time out interval\nsuccess     # Sucess block invokes once device get connected .\nfailure     # Failure block returns if any error.    -(void)disconnectDevice(PhilipsDevice *)device withSucess:(void (^)())sucess withfailure: (void(^)(NSError *error))failure;  Parameters\ndevice      # Type of Philips device(Watch/Band) to disconnect.\nsuccess     # Sucess block invokes once disconnect the device.\nfailure     # Failure block returns if any error.    Synching Public    -(void)startSynchForDevice(PhilipsDevice *)device with delegate:(Id)delegate;  Parameters\ndevice      # Type of Philips device(Watch/Band) need to synch.\ndelegate    # protocol to get updates on synching process.    -(void)setSynchTimeout(NSTimeInterval)timeout;  Parameters\ntimeout     # Synching connection time out.    -(void)stopSynch;  - To stop synching.    Synching Delegate    -(void)didUpdateProgress:(Float)progress;  Parameters\nprogress    # Provies the progress percentage of synching.    -(void)didFailSynchWithError(NSError *)error;  Parameters\nerror     # Invokes while failur in synching along with error.    -(void)didFinishSynching;  - Invoked when synching completed    Synching Private   -(id)initSynchManagerWithTimeout(NSTimeInterval)timeout isBeaconEnabled(Bool)isEnabled\nwithSucess:(void (^)())sucess withfailure:(void(^)(NSError *error))failure; Parameters\ntimeout     # Synching connection time out.\nisEnabled   # To enable/disbale the beacon\nsuccess     # Sucess block invokes once creation of synch manager instance.\nfailure     # Failure block returns if any error.    Observations Public    -(NSArray*)getDataFromLocalDBForObservationType:(ObservationType)type fromDate:(NSDate*)startDate toDate:(NSDate*)endDate;  Parameters\ntype        # Type of observation.\nstartDate   # From the date,the observations to be fetched.\nendDate     # Till the date,the observations to be fetched.\n\nReturns     # List of observations between Start and End dates    -(Float*)getMinForObservationType:(ObservationType)type forDevice:(PhilipsDevice*)device;  Parameters\ntype        # Type of observation.\ndevice      # Philips device details.\n\nReturns     # Minimum value of ObservationType.    -(Float*)getMaxForObservationType:(ObservationType)type forDeviceType: (PhilipsDevice*)device;  Parameters\ntype        # Type of observation.\ndevice      # Philips device details.\n\nReturns     # Maximum value of ObservationType.    -(NSArray*)getDayTotalForObservationType:(ObservationType)type day(NSDate*)date forDeviceType:(PhilipsDevice*)device;  Parameters\ntype        # Type of observation.\nday         # Date of observation.\ndevice      # Philips device details.\n\nReturns     # List of Observations of the give date.    -(NSArray*)getAllObservationforDeviceType(PhilipsDevice*)device start(NSDate*)date end(NSDate*)date;  Parameters\ndevice      # Philips device details.\nstartDate   # From the date, the observations to be fetched.\nendDate     # Till the date, the observations to be fetched.\n\nReturns     # List of Observations between the given dates.    -(NSArray*)getLatestObservationForObservationType:(ObservationType)type forDeviceType: (PhilipsDevice*)device;  Parameters\ntype        # Type of observation.\ndevice      # Philips device details.\n\nReturns     # List of Observations of current day.    -(NSArray*)getSupportedObservationTypesForDeviceTypes:(PhilipsDevice*)device;  Parameters\ndevice      # Philips device details.\n\nReturns     # List of supported Observations of the philips device.    -(NSArray*)getAllObservationsDeviceType:(PhilipsDevice*)device start(NSDate*)startDate end(NSDate*)endDate;  Parameters\ndevice      # Philips device details.\nstartDate   # From the date, the observations to be fetched.\nendDate     # Till the date, the observations to be fetched.\n\nReturns     # List of Observations between start and end dates.    -(NSArray*)getLatestObservationTypesForDevice:(PhilipsDevice*)device;  Parameters\ndevice      # Philips device details.\n\nReturns     # List of Observation types of current day.    -(NSArray*)getObservationForObservationType:(ObservationType)type forDeviceType:(PhilipsDevice*)device from(NSDate*)startDate to(NSDate*)endDate;  Parameters\ntype        # Type of observation.\ndevice      # Philips device details.\nstartDate   # From the date, the observations to be fetched.\nendDate     # Till the date, the observations to be fetched.\n\nReturns     # List of Observations between start and end dates.    -(void)clearAllObservations;  - Delete all the observations from local DB.    -(void)clearAllObservationsForDeviceType:(PhilipsDevice*)device;  - Delete all the observations from local DB for give philips device.    Observations Private    -(id)initCoreDataManagerWithDataDuration:(Integer)daysToStore withModelName:(NSString*)name\nstorFolder:(NSString*)storeFolder withPassPhrase :(NSString*)key;  Parameters\ndaysToStore # Number of days Local storage need to be maintained.\nname        # Name of the local DB.\nstoreFolder # Path of the local storage.\nkey         # Key used for encryption/decryption.\n\nReturns     # instance of core data manager.    \u2013(void)setup;  - Core data releated setup.    -(void)createObservations:(NSArray*)observations withDeviceType:(PhilipsDevice*)device;  Parameters\nobservations    # List of observations to be stored.\ndevice          # Philips device details.    TargetSetting    -(void)setActiveMinutes:(Integer)value forDevice(PhilipsDevice*)device;  Parameters\nvalue       # Active in minutes. \ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).    -(void)setActiveCalories:(Integer)value forDevice(PhilipsDevice*)device;  Parameters\nvalue       # Count of active calories.\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).    -(void)setSteps:(Integer)value forDevice(PhilipsDevice*)device;  Parameters\nvalue       # Count of active calories.\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).    -(Integer)getActiveMinutesforDevice(PhilipsDevice*)device;  Returns\nInteger     # Active minutes.\n\nParameter\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).    -(Integer)getActiveCaloriesforDevice(PhilipsDevice*)device;  Return\nInteger     # Active calories.\n\nParameter\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).    -(Integer)getStepsforDevice(PhilipsDevice*)device;  Return\nInteger     # Active steps.\n\nParameter\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).", 
            "title": "MoonSDK_API"
        }, 
        {
            "location": "/#userconfiguration", 
            "text": "-(id)init;  -Initializer for User Configuration object   Properties with setter and getter   PhilipsSupportedDevices (NSArray)   Height (Integer)  Weight (Integer)  Gender (Integer)  DOB (NSDate)   DeviceWearingPosition (Integer)   UserDominantHand (Integer)  ActiveMinutes (Integer)   ActiveCalories (Integer)   Steps (Integer)", 
            "title": "UserConfiguration"
        }, 
        {
            "location": "/#philipsdeviceconfiguration", 
            "text": "(Wrapper of BLE device)    -(id)init;  -Initializer for PhilipsDeviceConfiguration object   Properties with setter and getter   BatteryLevel (NSString)  ComponentCTN (NSString)  ComponentVersion (Integer)  DatePaired (NSDate)   DeviceID (NSString)   FirmwareVersion (NSString)  LastSynchDate (NSDate)   MajorNumber (Integer)   ManufacturName (NSString)   MinorNumber (Integer)   ModelName (NSString)   ProximityUUID (NSString)   SerialNumber (NSString)", 
            "title": "PhilipsDeviceConfiguration"
        }, 
        {
            "location": "/#philipsdevice", 
            "text": "-(id)init;   Initializer for PhilipsDevice object.    -(void)enableBeacon(Bool)isEnable;  Parameters\nisEnable    # To Enable/Disable iBeacon.    -(void)setBeaconFrequence:(Integert)value forDevice:(PhilipsDevice*)device;  Parameters\nvalue   # To set beacon frequence.\ndevice  # Contains infomation about Philips device (PhilipsDeviceConfiguration).    -(void)resetBeaconFrequenceforDevice:(PhilipsDevice*)device;  Parameters\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).    -(void)setUnitsType:(Integer)unitsType;  Parameters\nunitsType   # To set units type.    \u2013(void)stopFirmwareUploadToDevice:(PhilipsDevice*)device;  Parameters\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).    \u2013(void)diployFirmwareToDevice:(PhilipsDevice*)device;  Parameters\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).    \u2013(void)uploadFirmware:(NSData)firmware forDevice:(PhilipsDevice*)device;  Parameters\nfirmware    # Firmware data to be diployed to Philips device.\ndevice      # Contains infomation about Philips device (PhilipsDeviceConfiguration).    PhilipsDevice Delegate    -(void)didUpdateProgressofUpload:(Float)progress;    Parameters\nprogress    # Firmware delegate method invoked to update the progress.    -(void)didFinishUpload;  -Invoked once finished completed.    -(void)didFailUploadWithError(NSError *)error;  Parameters\nerror    # Invoked if any error occurred while uploding.", 
            "title": "PhilipsDevice"
        }
    ]
}